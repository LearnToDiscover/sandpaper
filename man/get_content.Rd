% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-aggregate.R
\name{get_content}
\alias{get_content}
\title{Get sections from an episode's HTML page}
\usage{
get_content(
  episode,
  content = "*",
  label = FALSE,
  pkg = NULL,
  instructor = FALSE
)
}
\arguments{
\item{episode}{an object of class \code{xml_document}, a path to a markdown or
html file of an episode.}

\item{content}{an XPath fragment. defaults to "*"}

\item{label}{if \code{TRUE}, elements will be named by their ids. This is best
used when content = "section".}

\item{pkg}{an object created via \code{\link[pkgdown:as_pkgdown]{pkgdown::as_pkgdown()}} of a lesson.}

\item{instructor}{if \code{TRUE}, the instructor version of the episode is read,
defaults to \code{FALSE}. This has no effect if the episode is an \code{xml_document}.}
}
\description{
Get sections from an episode's HTML page
}
\details{
The contents of the lesson are contained in the following templating cascade:

\if{html}{\out{<div class="sourceCode html">}}\preformatted{<body>
  <div class='container'>
    <div class='row'>
      <div class='[...] primary-content'>
        <main>
          <div class='[...] lesson-content'>
            CONTENT HERE
}\if{html}{\out{</div>}}

This function will extract the content from the episode without the templating.
}
\examples{
if (FALSE) {
  lsn <- "/path/to/lesson"
  pkg <- pkgdown::as_pkgdown(fs::path(lsn, "site"))

  # for AiO pages, this will return only the top-level sections:
  get_content("aio", content = "section", label = TRUE, pkg = pkg)

  # for episode pages, this will return everything that's not template
  get_content("01-introduction", pkg = pkg)

  # for things that are within lessons but we don't know their exact location,
  # we can prefix a `/` to double up the slash, which will produce
}
}
\keyword{internal}
