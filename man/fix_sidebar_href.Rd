% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-sidebar.R
\name{fix_sidebar_href}
\alias{fix_sidebar_href}
\alias{make_url}
\alias{append}
\title{Fix the refs for a vector of sidebar nodes}
\usage{
fix_sidebar_href(
  item,
  path = NULL,
  scheme = NULL,
  server = NULL,
  query = NULL,
  fragment = NULL
)

make_url(parsed)

append(first, sep = "#", last, trim = TRUE)
}
\arguments{
\item{item}{a text representation of HTML nodes that contain \verb{<a>} elements.}

\item{path, scheme, server, query, fragment}{character vectors of elements to
replace. This can be a single element vector, which will be recycled or
a vector with the same length as \code{item}.}

\item{parsed}{a data frame produced via \link[xml2:url_parse]{xml2::url_parse}}

\item{first}{a character vector}

\item{sep}{a character vector of length 1}

\item{last}{a character vector, same length as \code{first} or length 1}

\item{trim}{a logical indicating if the leading and trailing \code{sep} should
be trimmed from \code{first} and \code{last}.}
}
\value{
the text representation of HTML nodes with the \code{href} element
modified.
}
\description{
update links from a list of HTML node
}
\details{
Repeat after me: parsing HTML with regular expressions is bad.
This function uses \code{\link[xml2:read_xml]{xml2::read_html()}} to parse incoming HTML content to
convert the HTML string into an XML document where we can extract all of
the anchor links, parse them and replace their contents without regex. This
is acheived via \code{\link[xml2:url_parse]{xml2::url_parse()}} separating the URL into pieces and
updating those pieces for each node.

\code{fix_sidebar_href()} is useful because The sidebar nodes needs to be
updated for the 404 page so that all links use the published URL.
NOTE: this does not take into account \code{port} or \code{user}.

The auxilary functions \code{make_url()}, \code{append()} and \code{prepend()} are used to
convert the output of \code{\link[xml2:url_parse]{xml2::url_parse()}} back to a URL.
}
\examples{
my_links <- c(
  "<div id='one'><div id='one-one'><a href='index.html'>Index</a></div></div>",
  "<div id='two'><div id='two-two'><a href='two.html'><em>Two</em></a></div></div>",
  "<div id='three'><div id='three-three'><a href='three.html'>Three</a></div></div>",
  "<div id='four'><div id='four-four'><a href='four.html'>Four</a></div></div>",
  "<div id='five'><div id='five-five'><a href='five.html'>Five</a></div></div>"
)

snd <- asNamespace("sandpaper")
# Prepend a server to the links
snd$fix_sidebar_href(my_links, scheme = "https", server = "example.com")
snd$fix_sidebar_href(my_links, server = "https://example.com")


# Add an anchor to the links
snd$fix_sidebar_href(my_links, scheme = "https", fragment = "anchor")

# NOTE: this will _always_ return a character vector, even if the input is
# incorrect
snd$fix_sidebar_href(list(), server = "example.com")
}
\keyword{internal}
