% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-built-db.R
\name{get_hash}
\alias{get_hash}
\alias{get_built_db}
\alias{build_status}
\title{Identify what files need to be rebuilt and what need to be removed}
\usage{
get_hash(path, db = fs::path(path_built(path), "md5sum.txt"))

get_built_db(db = "site/built/md5sum.txt", filter = "*R?md")

build_status(
  sources,
  db = "site/built/md5sum.txt",
  rebuild = FALSE,
  write = FALSE
)
}
\arguments{
\item{path}{path to at least one generated markdown file}

\item{db}{the path to the database}

\item{filter}{regex describing files to include.}

\item{sources}{a character vector of ALL source files OR a single file to be
rebuilt. These must be \emph{absolute paths}}

\item{rebuild}{if the files should be rebuilt, set this to TRUE (defaults to
FALSE)}

\item{write}{if TRUE, the database will be updated, Defaults to FALSE,
meaning that the database will remain the same.}
}
\value{
a list of the following elements
\itemize{
\item \emph{build} absolute paths of files to build
\item \emph{new} a new data frame with three columns:
\itemize{
\item file the relative path to the source file
\item checksum the md5 sum of the source file
\item built the relative path to the built file
\item date the date a file was last updated/built
}
\item \emph{remove} absolute paths of files to remove. This will be missing if there
is nothing to remove
\item \emph{old} old database (for debugging). This will be missing if there is no
old database or if a single file was rebuilt.
}
}
\description{
\code{build_status()} takes in a vector of files and compares them against a text
database of files with checksums. It's been heavily adapted from blogdown to
provide utilities for removal and updating of the old database.
}
\details{
\code{get_built_db()} returns the text database, which you can filter on

\code{get_hash()} should probably be named \code{get_expected_hash()} because it will
return the expected hash of a given file from the database

If you supply a single file into this function, we assume that you want that
one file to be rebuilt, so we will \emph{always} return that file in the \verb{$build}
element and update the md5 sum in the database (if it has changed at all).

If you supply multiple files, you are indicating that these are the \emph{only}
files you care about and the database will be updated accordingly, removing
entries missing from the sources.
}
\examples{
# This demonstration will show how a temporary database can be set up. It
# will only work with a sandpaper lesson
# setup -----------------------------------------------------------------
tmp <- tempfile()
on.exit(fs::dir_delete(tmp), add = TRUE)
create_lesson(tmp, rmd = FALSE, open = FALSE)

# show build status -----------------------------------------------------
# get namespace to use internal functions
sp <- asNamespace("sandpaper")
db <- fs::path(tmp, "site/built/md5sum.txt")
resources <- fs::path(tmp, c("episodes/introduction.md", "index.md"))
# first run, everything needs to be built and no build file exists
sp$build_status(resources, db, write = TRUE)
# second run, everything is identical and nothing to be rebuilt
sp$build_status(resources, db, write = TRUE)
# this is because the db exists on disk and you can query it
sp$get_built_db(db, filter = "*")
sp$get_built_db(db, filter = "*R?md")
# if you get the hash of the file, it's equal to the expected:
print(actual <- tools::md5sum(resources[[1]]))
print(expected <- sp$get_hash(resources[[1]], db))
unname(actual == expected)

# replaced files need to be rebuilt -------------------------------------
# if we change the introduction to an R Markdown file, the build will
# see this as a deleted file and re-added file.
cat("This is now an R Markdown document and the time is `r Sys.time()`\n",
  file = resources[[1]], append = TRUE)
fs::file_move(resources[[1]], fs::path_ext_set(resources[[1]], "Rmd"))
resources[[1]] <- fs::path_ext_set(resources[[1]], "Rmd")
set_episodes(tmp, fs::path_file(resources[[1]]), write = TRUE)
sp$build_status(resources, db, write = TRUE)

# modified files need to be rebuilt -------------------------------------
cat("We are using `r R.version.string`\n",
  file = resources[[1]], append = TRUE)
sp$build_status(resources, db, write = TRUE)

# child files require rebuilding ----------------------------------------
writeLines("Hello from another file!\n",
  fs::path(tmp, "episodes", "files", "hi.md"))
cat("\n\n```{r child='files/hi.md'}\n```\n",
  file = resources[[1]], append = TRUE)
sp$build_status(resources, db, write = TRUE)
# NOTE: for child files, the checksums are the checksum of the checksums
# of the parent and children, so the file checksum may not make sense

# changing a child file rebuilds the parent ----------------------------
cat("Goodbye!\n", append = TRUE,
  file = fs::path(tmp, "episodes", "files", "hi.md"))
sp$build_status(resources, db, write = TRUE)
}
\seealso{
\code{\link[=get_resource_list]{get_resource_list()}}, \code{\link[=reserved_db]{reserved_db()}}, \code{\link[=hash_children]{hash_children()}}
}
\keyword{internal}
