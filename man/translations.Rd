% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-translate.R
\docType{data}
\name{these}
\alias{these}
\alias{translations}
\alias{establish_translation_vars}
\alias{set_language}
\alias{tr_src}
\alias{tr_get}
\alias{tr_varnish}
\alias{tr_computed}
\title{Establish and Manage Translation Strings}
\format{
An object of class \code{environment} of length 1.
}
\usage{
these

establish_translation_vars()

set_language(lang = NULL)

tr_src(from = "varnish", key = NULL)

tr_get(from = "varnish", key = NULL)

tr_varnish(key = NULL)

tr_computed(key = NULL)
}
\arguments{
\item{lang}{a two-letter language code (optionally with a country code).
Defaults to \code{NULL}, which falls back to English (the language of the
source code).}

\item{from}{a single character specifying the translation list to fetch.
This defaults to "varnish" but can be one of the following:
\itemize{
\item src
\item varnish
\item computed
}}

\item{key}{a single character specifying a specific key to fetch from the
translation list. This defaults to \code{NULL}, returning the whole list.}
}
\value{
if \code{key = NULL}, a list if \code{key} is a single character, the result
will be an unnamed character vector of length 1 representing the value from
that list.
}
\description{
This is documentation for internal functions for translation. If you want a
guide to providing translations, please read \code{vignette("translations", package = "sandpaper")}
}
\details{
A page generated from {sandpaper} is made up of user-provided
content wrapped into templated HTML provided by {varnish}. Since users can
provide content in any human language that can be processed by computer,
{sandpaper} must have a method to match the template content to the
language of the content. These translations are added to the source of
{sandpaper} by volunteers using the {potools} package.

Template content strings are stored in the \verb{$translations} element of the
\code{these} global environment variable, which is generated by the
\code{establish_translation_vars()} function, which is run every time
{sandpaper} is loaded. The \verb{$translations} element consists of three
lists:
\itemize{
\item \code{varnish}: a list of translated strings that are passed directly
to {varnish}
\item \code{computed}: a list of translated strings that are incorporated into
the HTML content before it is passed to {varnish}.
\item \code{src}: a source list of the above two lists that serves as the source
of the translations.
}

Whenever a lesson is built, the function \code{set_language()} will read the
\code{lang} item from the \code{config.yaml} and apply translations to
\code{these$translations$varnish} and \code{these$translations$computed} before the
lesson is generated or updated.
\subsection{List of Translation Variables}{

\if{html}{\out{<div class="sourceCode {r, child="man/children/translation-vars.Rmd"}">}}\preformatted{}\if{html}{\out{</div>}}
}
}
\examples{
# When sandpaper is loaded, these functions return English
snd <- asNamespace("sandpaper")
head(snd$tr_varnish())
head(snd$tr_computed())

# Setting language to Spanish will translate the computed and varnish
snd$set_language("es")
head(snd$tr_varnish())
head(snd$tr_computed())

# The source will remain the same
head(snd$tr_src("varnish"))
head(snd$tr_src("computed"))

# Running set_language with no arguments defaults to English
snd$set_language()
head(snd$tr_varnish())
head(snd$tr_computed())
}
\seealso{
\code{\link[=known_languages]{known_languages()}} for a list of known language codes.
}
\keyword{internal}
