% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_aio.R, R/build_images.R,
%   R/build_instructor_notes.R, R/build_keypoints.R, R/utils-aggregate.R
\name{build_aio}
\alias{build_aio}
\alias{build_images}
\alias{build_instructor_notes}
\alias{build_keypoints}
\alias{build_agg_page}
\title{Build a page for aggregating common elements}
\usage{
build_aio(pkg, pages = NULL, quiet = FALSE)

build_images(pkg, pages = NULL, quiet = FALSE)

build_instructor_notes(pkg, pages = NULL, built = NULL, quiet)

build_keypoints(pkg, pages = NULL, quiet = FALSE)

build_agg_page(
  pkg,
  pages,
  title = NULL,
  slug = NULL,
  aggregate = "section",
  append = "self::node()",
  prefix = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{pkg}{an object created via \code{\link[pkgdown:as_pkgdown]{pkgdown::as_pkgdown()}} of a lesson.}

\item{pages}{output from the function \code{\link[=read_all_html]{read_all_html()}}: a nested list of
\code{xml_document} objects representing episodes in the lesson}

\item{quiet}{if \code{TRUE}, no messages will be emitted. If FALSE, pkgdown will
report creation of the temporary file.}

\item{built}{a vector of markdown documents that have recently been rebuilt
(for future use)}

\item{title}{the new page title}

\item{slug}{the slug for the page (e.g. "aio" will become "aio.html")}

\item{aggregate}{a selector for the lesson content you want to aggregate.
The default is "section", which will aggregate all sections, but nothing
outside of the sections. To grab everything in the page, use "*"}

\item{append}{a selector for the section of the page where the aggregate data
should be placed. This defaults to "self::node()", which indicates that the
entire page should be appended.}

\item{prefix}{flag to add a prefix for the aggregated sections. Defaults to
\code{FALSE}.}
}
\value{
NULL, invisibly. This is called for its side-effect
}
\description{
Build a page for aggregating common elements
}
\details{
Building an aggregate page is very much akin to copy/paste---you take the
same elements across several pages and paste them into one large page. We can
do this programmatically by using XPath to extract nodes from pages and add
them into the document.

To customise the page, we need a few things:
\enumerate{
\item a title
\item a slug
\item a method to prepare and insert the extracted content (e.g. \code{\link[=make_aio_section]{make_aio_section()}})
}
}
\note{
This function assumes that you have already built all the episodes of your
lesson.
}
\examples{
if (FALSE) {
  # build_aio() assumes that your lesson has been built and takes in a
  # pkgdown object, which can be created from the `site/` folder in your
  # lesson.
  lsn <- "/path/to/my/lesson"
  pkg <- pkgdown::as_pkgdown(fs::path(lsn, "site"))

  htmls <- read_all_html(pkg$dst_path)
  build_aio(pkg, htmls, quiet = FALSE)
  build_keypoints(pkg, htmls, quiet = FALSE)
}
}
\keyword{internal}
